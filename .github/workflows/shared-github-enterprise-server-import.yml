on:
  workflow_call:
    inputs:
      migration-guid:
        default: migration-archive-${{ github.event.issue.number }}
        type: string
      runner:
        default: self-hosted
        type: string
    secrets:
      GHES_ADMIN_USERNAME:
        required: true
      GHES_ADMIN_TOKEN:
        required: true
      GHES_HOSTNAME:
        required: true
      SSH_PRIVATE_KEY:
        required: true

jobs:
  export:
    name: Import
    runs-on: ${{ inputs.runner }}

    if: github.event_name == 'issue_comment' &&
      (startsWith(github.event.comment.body, '/run-dry-run-migration') ||
      startsWith(github.event.comment.body, '/run-production-migration'))

    env:
      MIGRATION_GUID: ${{ inputs.migration-guid }}
      GHES_SSH: ssh -i ssh.key -p 122 admin@${{ secrets.GHES_HOSTNAME }}
      GHES_SCP: scp -i ssh.key -P 122
      GHES_HOSTNAME: ${{ secrets.GHES_HOSTNAME }}

    steps:
      - name: Check out scripts
        uses: actions/checkout@v3

      - name: Setup SSH key
        shell: bash
        run: |
          echo -e "${{ secrets.SSH_PRIVATE_KEY }}" > ssh.key
          chmod 400 ssh.key

      - name: Set migration type
        uses: actions/github-script@v6
        id: migration-type
        with:
          result-encoding: string
          script: |
            return context.payload.comment.body.match('dry-run') ? 'Dry-run' : 'Production'

      - name: Display GHES version
        run: $GHES_SSH -- ghe-version

      - name: Display migration GUID
        run: echo ${{ steps.migration-type.outputs.result }}-$MIGRATION_GUID

      - name: Create workspace
        run: mkdir -p ${{ steps.migration-type.outputs.result }}-$MIGRATION_GUID

      - uses: actions/download-artifact@v3
        with:
          name: ${{ env.MIGRATION_GUID }}.tar.gz
          path: ${{ steps.migration-type.outputs.result }}-${{ inputs.migration-guid }}/

      - name: Upload migration archive to GHES
        run: |
          $GHES_SCP \
          ${{ steps.migration-type.outputs.result }}-${{ inputs.migration-guid }}/${{ env.MIGRATION_GUID }}.tar.gz admin@$GHES_HOSTNAME:/home/admin

      - name: Prepare migration
        run: |
          $GHES_SSH -- ghe-migrator prepare \
          /home/admin/${{ env.MIGRATION_GUID }}.tar.gz \
          --guid ${{ steps.migration-type.outputs.result }}-${{ inputs.migration-guid }}

      - name: Update issue with status
        uses: actions/github-script@v6
        with:
          script: |
            const migrationType = "${{ steps.migration-type.outputs.result }}".toLowerCase();
            const body = `:hourglass_flowing_sand: Prepared **${migrationType}** migration. [View workflow run for details](${context.payload.repository.html_url}/actions/runs/${context.runId})`

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            })

      - name: Resolve conflicts
        run: |
          while test "$($GHES_SSH -- ghe-migrator conflicts \
            --guid ${{ steps.migration-type.outputs.result }}-${{ inputs.migration-guid }} \
            | tee ${{ steps.migration-type.outputs.result }}-${{ inputs.migration-guid }}-conflicts.csv)" != "";
          do
            $GHES_SCP ${{ steps.migration-type.outputs.result }}-${{ inputs.migration-guid }}-conflicts.csv admin@$GHES_HOSTNAME:/home/admin/
            $GHES_SSH -- ghe-migrator map \
              --input ${{ steps.migration-type.outputs.result }}-${{ inputs.migration-guid }}-conflicts.csv \
              --guid ${{ steps.migration-type.outputs.result }}-${{ inputs.migration-guid }}
          done

      - name: Update issue with status
        uses: actions/github-script@v6
        if: ${{ success() }}
        with:
          script: |
            const migrationType = "${{ steps.migration-type.outputs.result }}".toLowerCase();
            const body = `:hourglass_flowing_sand: Resolved Conflicts for **${migrationType}** migration. [View workflow run for details](${context.payload.repository.html_url}/actions/runs/${context.runId})`

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            })

      - name: Start Migration
        run: |
          $GHES_SSH -- ghe-migrator import \
          /home/admin/${{ env.MIGRATION_GUID }}.tar.gz \
          --guid ${{ steps.migration-type.outputs.result }}-${{ inputs.migration-guid }} \
          --username=${{ secrets.GHES_ADMIN_USERNAME }} \
          --pat=${{ secrets.GHES_ADMIN_TOKEN }}

      - name: Update issue with status
        uses: actions/github-script@v6
        if: ${{ success() }}
        with:
          script: |
            const migrationType = "${{ steps.migration-type.outputs.result }}".toLowerCase();
            const body = `:hourglass_flowing_sand: Completed **${migrationType}** migration successfully. [View workflow run for details](${context.payload.repository.html_url}/actions/runs/${context.runId})`

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            })

      - name: Migration Unlock
        run: |
          $GHES_SSH -- ghe-migrator unlock \
          --guid ${{ steps.migration-type.outputs.result }}-${{ inputs.migration-guid }}

      - name: Migration Cleanup
        run: |
          $GHES_SSH -- rm ${{ env.MIGRATION_GUID }}.tar.gz
          $GHES_SSH -- rm ${{ steps.migration-type.outputs.result }}-${{ inputs.migration-guid }}-conflicts.csv

      - name: Update issue with status
        uses: actions/github-script@v6
        with:
          script: |
            const migrationType = "${{ steps.migration-type.outputs.result }}".toLowerCase();
            const body = `:hourglass_flowing_sand: Unlocked **${migrationType}** repos. [View workflow run for details](${context.payload.repository.html_url}/actions/runs/${context.runId})`

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            })

      - name: Add delete repositories comment
        uses: actions/github-script@v6
        if: ${{ contains(github.event.comment.body, 'Dry-run') }}
        with:
          script: |
            const migrationType = "${{ steps.migration-type.outputs.result }}";
            if (migrationType === 'Dry-run') {
              let body = `In order to delete the migrated repositories of the dry-run, add a comment with the following slash command:
              \`\`\`
              /delete-repositories ${{ inputs.migration-guid }}
              \`\`\`
              `
              // remove leading whitespace
              body = body.replace(/  +/g, '')
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body
              })
            }

      - name: Close Issue
        uses: actions/github-script@v6
        if: ${{ contains(github.event.comment.body, 'Production') }}
        with:
          script: |
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed',
              body: ':rocket: Migration Completed'
            })

            await github.rest.issues.lock({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              lock_reason: 'resolved'
            })
