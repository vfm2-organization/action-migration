name: Shared GitHub Enterprise Server Export

on:
  workflow_call:
    inputs:
      migration-guid:
        default: migration-archive-${{ github.event.issue.number }}
        type: string
      runner:
        default: ubuntu-latest
        type: string
      ghes-ssh-host:
        type: string
        required: true
    secrets:
      GHES_ADMIN_USERNAME:
        required: true
      GHES_ADMIN_TOKEN:
        required: true

jobs:
  export:
    name: Export
    runs-on: ${{ inputs.runner }}

    if: github.event_name == 'issue_comment' &&
      (startsWith(github.event.comment.body, '/run-dry-run-migration') ||
      startsWith(github.event.comment.body, '/run-production-migration'))

    env:
      MIGRATION_GUID: ${{ inputs.migration-guid }}
      GHES_SSH_HOST: ${{ inputs.ghes-ssh-host }}
      GHES_SSH: ssh -p 122 admin@${{ inputs.ghes-ssh-host }}
      GHES_SCP: scp -P 122 

    steps:
      - name: Check out scripts
        uses: actions/checkout@v2

      - name: Set migration type
        uses: actions/github-script@v5
        id: migration-type
        with:
          result-encoding: string
          script: |
            return context.payload.comment.body.match('dry-run') ? 'Dry-run' : 'Production'

      - name: Update issue with running state
        uses: actions/github-script@v5
        with:
          script: |
            const body = `:hourglass_flowing_sand: Running **${"${{ steps.migration-type.outputs.result }}".toLowerCase()}** migration. [View workflow run for details](${context.payload.repository.html_url}/actions/runs/${context.runId})`

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            })

      - name: Parse repositories from issue body and write to file
        uses: actions/github-script@v5
        with:
          script: |
            const fs = require('fs')
            const parsedIssueBody = require('./.github/scripts/parse-issue-body.js')({context, core})
            
            fs.writeFileSync('repositories.txt', parsedIssueBody.repositories.trim())

      - name: Display GHES version
        run: $GHES_SSH -- ghe-version
        
      - name: Display migration GUID
        run: echo $MIGRATION_GUID
        
      - name: Upload list of repositories to GHES
        run: $GHES_SCP repositories.txt admin@$GHES_SSH_HOST:/home/admin

      - name: Add repositories to export without locking repositories
        if: ${{ contains(github.event.comment.body, 'dry-run') }}
        run: $GHES_SSH -- ghe-migrator add --input=/home/admin/repositories.txt --guid=$MIGRATION_GUID

      - name: Add repositories to export with locking repositories
        if: ${{ contains(github.event.comment.body, 'production') }}
        run: $GHES_SSH -- ghe-migrator add --input=/home/admin/repositories.txt --guid=$MIGRATION_GUID --lock

      - name: Export repositories
        run: $GHES_SSH -- ghe-migrator export --guid=$MIGRATION_GUID --username=$GHES_ADMIN_USERNAME --pat=$GHES_ADMIN_TOKEN
        env:
          GHES_ADMIN_USERNAME: ${{ secrets.GHES_ADMIN_USERNAME }}
          GHES_ADMIN_TOKEN: ${{ secrets.GHES_ADMIN_TOKEN }}

      - name: Download migration archive from GHES
        run: $GHES_SCP admin@$GHES_SSH_HOST:/data/user/tmp/$MIGRATION_GUID.tar.gz .

      - name: Upload migration archive to artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.MIGRATION_GUID }}.tar.gz
          path: ./${{ env.MIGRATION_GUID }}.tar.gz
          if-no-files-found: error
          retention-days: 1

      - if: ${{ failure() }}
        name: Report failed migration
        uses: actions/github-script@v3
        with:
          script: |
            const body = `:no_entry: **Export failed.** [View workflow run for details](${context.payload.repository.html_url}/actions/runs/${context.runId})`
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            })

      - if: ${{ always() }}
        name: Clean up files on server
        run: |
          $GHES_SSH -- [ -e ${{ env.MIGRATION_GUID }}.tar.gz ] && rm ${{ env.MIGRATION_GUID }}.tar.gz
          $GHES_SSH -- [ -e repositories.txt ] && rm repositories.txt
